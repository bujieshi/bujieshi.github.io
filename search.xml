<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50171615%2F</url>
    <content type="text"><![CDATA[iphone 手机忘记 访问限制密码 处理方法(未越狱版) 本人 配置环境： 手机 ：iphone 5s A1533 系统：ios 8.4 使用电脑 ：mac air (windows 下未做测试，但是基本流程，基本一样 ); 结果： 亲测 ，可行， 1.所需工具 1. iBackupbot (最新版) 2.iTunes 2.开始进行 1. 下载并安装iBackupbot备份修改软件， 点击这里 进入官网，根据自己的电脑系统进行选择下载。 2、使用iTunes对iPhone做一个新的备份。 3、在iBackupbot里打开刚刚做好的这个备份，刚打开的时候可能会弹出一些错误信息等提示框，不用担心，iBackupbot是可以正常使用的， 3. 打开 iBackupbot 以后 最新版的会直接吧备份文件添加到iBackupbot中 然后点击System Files 接下来我们就看到我们的系统目录了，然后 在右边的工具栏上 输入 com.apple.springboard.plist 然后回车 ，找到文件 com.apple.springboard.plist 找到 com.apple.springboard.plist 文件 双击以后出现下面的情况 如图 这里需要注册么？ not ，不需要 点击 cancel 然后打开文件， 到达这一步 大家要小心了,(很重要) 接下来要找到 这个地方 然后 在下面添加文件(很重要) 这里添加 如果是直接从其他地方 复制过来的话，会保存失败 ， 这里要手动敲进去，然后才能保存成功，这里我摸索了半天，一直保存失败，手动敲入以后，才保存成功 添加完成以后视图如下： 然后点击保存的话 (直接Command+s) 1.保存失败提示： 2.保存成功 没有提示 接下来如何验证是否保存成功 1.双击再次 打开 com.apple.springboard.plist 文件 2.检查写入的两行东西是否成功，如图： 太好了，这行东西还在，那就好， 然后打开 iTunes ， 然后点击恢复备份 如果你的备份比较多的话，点击键盘上的shift+ 鼠标左键+iTunes 上的恢复按钮，选择你更改过的备份， 然后就是漫长的等待了 最后验证： 恢复完成后 打开设置—&gt;通用—&gt;访问限制 亲测，已成功，给力的给个赞]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50171619%2F</url>
    <content type="text"><![CDATA[ios 开发之加入所需字库问题 1. 下载所需的字库，然后添加到项目中 然后 添加到项目中 如图所示 2. 在info.plist 文件中添加 字库文件 (注： 我这里出现了问题，加载info.plist文件的时候你会发现有两个info.plist 文件。如下图：) ios 项目中 test 也是一个测试项目 (注：这里添加文件 不要添加错了，我这里犯了个错误，把下图的这句话加载到了test 这个info文件中，然后调试半天没有出来) 3.在正确的info.plist 文件中添加完成后，接下来就是在项目中的使用，这里如果不知道你要添加的名字：这里有两种方法： 第一种方法：选择你下砸的字库 然后双击打开 ， 打开完文件文件 ，提示如下图： 然后 最上面的标题栏就是你要使用的字体的名称 第二种方法： for ( int i = 0 ; i &lt; [familys count ]; i++) { NSString *family = [familys objectAtIndex :i]; NSLog ( @”Fontfamily:%@” , family); } 用这个方法进行调试 在输出的字体查看 是否加入成功 打开全部的字库文件： （注：这个字库的名称就是和我们第一种方法打开的字库标题的名称是一样的） 找到我们需要的字体，接下来就是使用了 UIFont *font = [ UIFont fontWithName : @”Akzidenz-Grotesk BQ” size :150 ]; _lableTarget . font = font; 一句话搞定了！ OK了，亲测，效果 如图：]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F49667203%2F</url>
    <content type="text"><![CDATA[react-native （faceBook 开源项目初探） 注：本文摘自： http://www.csdn.net/article/2015-09-24/2825787-react-native 这2天react-native放出源码，凭着facebook牌子和通过js编写原生应用的特点很快就热了起来，github的star过万应该毫无悬念。目前放出来的是ios版本，后续还会放出android版本，在加上之前的reactjs，那一份代码搞定三个平台并非不可能，于是我也下了个react-native来体验一把。 注：附上：Github 上的开源库下载地址 https://github.com/facebook/react-native 注：使用这个开源框架可能会需要其他工具 根据 官方推荐使用homebrew来安装nodejs,watchman,flow等相关 工具，那我们首先安装homebrew: 1. 首先，使用 Homebrew 官网提供的指引 安装 Homebrew ，然后在终端执行以下命 令 ：（注：该超链有的可能打不开，需要翻墙才能打开） 打开电脑中的终端 输入以下命令来安装 Homebrew ruby -e “ $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install )” 如果安装成功的话 （命令行输入 brew -v 查看安装版本） mac-2:~ srain$ brew -v Homebrew 0.9.5 (git revision ac9a7; last commit 2015-09-21) 版本过低将会导致无法安装后续几个组件。 可用 brew update 升级。 2.接下来，安装其他几个工具包 Node.js 和 npm Node.js 需要 4.0 及其以上版本。安装好之后，npm 也有了。 通过 nvm 安装 Node.js nvm 是 Node.js 的版本管理器，可以轻松安装各个版本的 Node.js 版本。 安装 nvm 可以通过 Homebrew 安装： brew install nvm 或者按照 这里 的方法安装。(注:个人觉得命令行来的比较快) 安装完成 （注： 检测是否安装成功 命令行 nvm -v 查看版本） 如图： 3. 接下来 安装Node.js 命令行 输入以下命令： nvm install node &amp;&amp; nvm alias default node 也可以直接下载安装 Node.js： https://nodejs.org/en/download/ （注：我这里 用命令行输入 安装不了 然后去官网下载了一个Node.js 的dmg 文件，然后安装成功） 检测是否安装成功 （注 : 命令行输入：node -v ） 如下图： 4. 接下来安装watchman 和flow 安装 watchman 和 flow 这两个包分别是监控文件变化和类型检查的。安装如下： brew install watchmanbrew install flow 5.接下就到重点了 安装 React-Native 通过 npm 安装即可： npm install -g react-native-cli 检查是否安装成功（注：命令行输入 react-native -v） 输出如下图 6. 查看配置是否能用 App开发环境的设置iOSXCode 6.3 及其以上即可。 Android 这个比较麻烦。 设置环境变量：ANDROID_HOME export ANDROID_HOME=/usr/local/opt/android-sdk SDK Manager 安装以下包： Android SDK Build-tools version 23.0.1 Android 6.0 (API 23) Android Support Repository 至此，我们所有的配置和工具包已经全部完成了(接下来就要进入实战了) 1.创建我的第一个 React-Native 项目 1.打开终端 cd 到你要放置项目的位置 然后输入命令： react-native init Dome1 初始化一个项目，其中 Dome1 是项目名字，这个随意。 等待一段时间之后 （ 具体视网络情况而定 ），项目初始化完成。( 注:这里的等待有点长,视情况而定) 如下图： 演示 （ 这里我要在桌面创建一个 名称为Dome2 的工程） （注：这里的需要等待一段时间，要有耐心） 创建成功后： 这里可以看到 两个版本:（ 一个ios 版本，一个安卓版本 ）然后，我们看看桌面，我们发现了什么 如图：dome2 已经存在了 接下来 ：打开看看： 这里你没有看错 ( 接下来我就只用操作两个文件就Ok了，一个index.android.js,一个是index.ios.js); 接下来，打开ios文件夹（这里的项目架构和我的的项目架构一样） 接下来， 打开我们的项目（这里是整个项目架构） 接下来， 来看我们的AppDeget (是不是要看到了什么了 ) 接下来 , 运行项目： 不管是 iOS 还是 Android，在开发调试阶段，都需要在 Mac 上启动一个 HTTP 服务，称为“Debug Server”，默认运行在 8081端口，APP 通 Debug Server 加载 js。 iOS 和 Android 的模拟器，连接 Mac 本机的服务都很方便。但是通过 USB 或者 WiFi 连接调试，就稍微麻烦一些了。 iOS还是非常简单，XCode 打开项目，点击运行就好。修改 index.ios.js, 在模拟器中 ⌘ + R 重新载入 js 即可看到相应的变化。 iOS 真机调试也简单，修改HTTP地址即可。 jsCodeLocation = [NSURL URLWithString:@” http://localhost:8081/index.ios.bundle “]; Android按照官方文档，需要一个模拟器（Genymotion模拟器也可以）。但是不像 iOS，Android开发平时更多是直接用真机进行开发和调试，如何运行部署到真机，下面会提到。 运行命令： react-native run-android 然后就会部署到模拟器，修改 index.android.js ，调出模拟器菜单键，选择重新载入 js 即可看到变化。 Android 真机调试示例 App 直接部署到真机，红色界面报错，无法连接到 Debug Server。 如果是 5.0 或者以上机型，可通过 adb 反向代理端口，将 Mac 端口反向代理到测试机上。 adb reverse tcp:8081 tcp:8081 如果 5.0 以下机器，应用安装到测试机上之后，摇动设备，在弹出菜单中选择 Dev Setting &gt; Debug Server host fordevice，然后填入 Mac 的 IP 地址（ifconfig 命令可查看本机 IP） 关于修改 DevHelper 来进行和 iOS 一样的开发调试，后续关于热部署时，我会介绍到。 在 Android Studio 中调试开发我们可能希望在 Android Studio 打开项目，然后编译部署到真机。 这个时候，在命令行启动 Debug Server 即可： react-native start 接下来极其重要： （项目中的实战演习,项目中的简单使用） （简单来说就是两步， 要么创建 JavaScript 文件，要么修改 JavaScript文件，来实现项目中的布局和实现 ） javaScript 本人不是很熟，附上彩蛋(两篇) ： 来自OSChina: http://www.oschina.net/translate/going-native-with-react 来自知乎: http://zhuanlan.zhihu.com/FrontendMagazine/19996445 结论和后续 本篇文章，iOS 和 Android 都适用。至此，环境配置和示例项目运行应该都好了。后续我会继续发几篇文章介绍： 重点介绍 Android 相关的开发：包括组件，源码分析等； 动态热部署； 多端代码复用。 参考文档官方文档： https://facebook.github.io/react-native/docs/getting-started.html#content]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50171623%2F</url>
    <content type="text"><![CDATA[mac修改host文件，让你的mac轻松上google 大家都可以在百度上轻松的搜索到windows系统怎么替换，修改host文件，但是对于mac os ，大家不一定都知道怎么去修改它下面，我来告诉大家怎么去修改host 在您决定开始操作之前，我们建议您备份当前 hosts文件 ，如果此文件内存在其他重要内容，请以追加的形式添加。 修改 hosts文件 实例操作 Windows系统，找到hosts这个文件，位于 C:\WINDOWS\system32\drivers\etc 目录里，以记事本的方式打开hosts，添加以上文档中的地址并保存就可以了，注意hosts文件没有后缀。 OS X 在 Finder 窗口按下［前往］［前往文件夹…］，输入 /etc 回车，将 hosts 文件拖拽到桌面，双击修改保存，再将其拖拽回 /etc ，鉴定替换； Linux 在终端运行命令 sudo vi /etc/hosts 修改； Android、iOS 使用 iFile 或其它文件管理器应用修改 /system/etc/hosts，并照原样修改好权限和所有者。 hosts文件 一般在什么位置 Windows系统 位于 C:\WINDOWS\system32\drivers\etc 目录里； linux、Mac系统 在 /etc/hosts 目录里； Android系统 在 /system/etc/hosts 目录里 mac 下 更改host 文件 实例操作 这里可能会提示没用修改权限 这里我们要改两个权限：（一个是etc文件夹的读写权限，一个host文件的读写权限 ） 我们先改变etc 的文件权限 找到etc文件夹 在文件夹上单击右键显示简介(如图) 更改权限 (注：这里更改网host文件以后 记得把权限更改回来) 然后进行下一步： 1. 打开finder 然后command+shift+G 弹出框 如图： 点击前往，跳转到etc 文件夹，如图： 2. 在上面的搜索框中搜索hosts 文件 （注： 找到hosts 文件，下面我们准备对hosts文件进行修改，如果怕出问题的话，请提前备份） 3. 找到host文件，点击右键—&gt;显示简介 如图： （注：一下几步很关键，请要看仔细了，本人尽可能的详细介绍） 看到这个界面，点击下面的小锁—-&gt;弹框如图，然后输入密码 然后回到这个页面—&gt;如图 小锁已经打开，然后更改everyone 的权限为读和写 ， （注：这一步很重要） 接下来，关闭这个页面， 接下来，用记事本打开hosts文件， 然后 点此 获取最新的host 文件 下载最新的host 文件 （下载完成，打开压缩文件===&gt;打开window-Mac文件） 然后找到 hosts.text文件 然后打开host.text 文件 （注：这里很重要，复制################################################################### 以下的内容）复制完成，返回到我们etc文件夹中的hosts 文件 然后把 我们复制的内容粘贴到我们系统中的host 文件中 如图： 添加复制内容的位置如图所示： 然后 保存，保存完成之后，再次更改hosts 文件的权限 该文原来的 （如图 ） 然后 到这里我们都完成任务了，好了，现在可以上 www.facebook.com www.YouTube.com]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50171621%2F</url>
    <content type="text"><![CDATA[将博客搬至CSDN 今天将刚写的两篇日志搬家到csdn 上去，希望大家捧场！]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50261823%2F</url>
    <content type="text"><![CDATA[Xcode升级,插件不能正常使用 昨天不小心升级了一下Xcode ,然后 今天使用的时候,发现插件使用不了了，比如我们常用的插件 VVDocumenter-Xcode(注释插件) 接下来我们教大家 如何让插件变得可用 1.打开终端。输入 defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID 然后我们得到序列号(这里是得到你本机的序列号) 如图 然后我们复制这个序列号，备用。 2.打开finder，然后command+shift+G 组合键。然后弹出个框框。然后 我们输入xocde插件路径： ~/library/Application Support/Developer/Shared/Xcode/Plug-ins 如图 3. 点击前往，我们找到插件 如图 4 .接下来 我们以其中的一个插件为例（其他插件的操作一样） 1.我们选择插件，然后点击右键(显示包内容)，如图： 2 .我们看到下面的界面：（如图） 3 .我们点击打开这个文件夹 ，接下来显示内容如图： 4 .然后我们打开info.plist 文件，如图： 然后 找到 如图所示的地方： 然后 增加一个Item 如图： 然后 把我们第一步复制的xcode 的序列号添加进去。。（Command+s 保存plist 文件） 5 .接下来 重启Xcode 以后会弹出一个框框， 重启Xcode时会提示“Load bundle”、 “SkipBundle”，这里必须选择“Load bundle”，不然插件无法使用。 总结：xcode升级以后，因为序列号不一样，所以我们要更改序列号。。。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50296581%2F</url>
    <content type="text"><![CDATA[IOS 蓝牙4.0(BLE 协议) 初窥 算了，都说初窥了，不写了，直接转载过来吧。。。 感谢 刘彦玮 大神 http://liuyanwei.jumppo.com/2015/07/17/ios-BLE-1.html 然后附上大神的 BabyBluetooth 的下载地址： https://github.com/coolnameismy/BabyBluetooth 详情请看 github 的介绍。。。。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50432892%2F</url>
    <content type="text"><![CDATA[如何从电脑中卸载cocoapods 今天为了写一篇教大家使用cocoapods的文章 ，特意研究了以下 如何卸载cocoapods， 因为本人的机子上已经安装成功了，所以要研究一下 如何卸载，然后在从新安装。 接下来我就教大家如何卸载cocoapods 1.打开终端，输入命令 which pod 然后回车 我们就看到一个地址，这个地址就是我们安装pod 的地址 如图所示 2 . 找到地址了，然后我们就要删除了 输入命令 sudo rm -rf /usr/local/bin/pod后面的地址就是图上的地址；接下来回让你输入密码（密码都知道，苹果的开机密码） 如图所示（ 移除pod组件 ） 3 .接下来我们就要找到我们的cocoapods 安装包的位置 输入如下命令： gem list （ 移除 RubyGems 中的 Cocoapods程序包， RubyGems（简称 gems）是一个用于对 Ruby组件进行打包的 Ruby打包系统。 它提供一个分发 Ruby 程序和库的标准格式，还提供一个管理程序包安装的工具。查看gems中本地程序包 ）如图所示： 4 .看到上面的列表，找到我们需要删除的cocoapods的部分，如图所示： 5 .接下来们要看清楚版本号，然后进行删除，输入命令 sudo gem uninstall cocoapods -v 0.39.0（注：后面的版本号要和上面列表中的版本号对应 ） 如果删除成功： 如图所示： 6. 接下来删除 下一个包,输入命令： sudo gem uninstall cocoapods-core -v 0.39.0（注：这个包上面也有，注意版本好的对应 ）， 如果删除成功：如图所示： 7 .接下来们们检查cocoapods是否删除： 输入如下命令： pod search AFNetworking或者pod 然后如图所示： 证明删除成功； 总结：cocoapods 的使用并没有我们想想的那么难，主要是对终端的操作要熟悉。好了，把cocoapods卸载掉了，然后开始安装吧…..]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50384766%2F</url>
    <content type="text"><![CDATA[github 的简单使用 工欲善其事，必先利其器 mac GitHub 客户端下载地址： https://desktop.github.com/ 注册账号： https://github.com/ –&gt;Pricing and Signup –&gt;Create a free account 1.打开 终端： 输入 cd ～/.ssh // 检查是否已经存在ssh 如图： 如果出现如下的字样的话，证明 ssh 不存在，我们需要创建一个ssh 出来。 2. 接下来 继续在终端输入如下命令 ssh-keygen -t rsa -C youremail@.com 如图： 3 .出现如下字样。。。表示我们ssh 已经创建好了 。。 4.接下来我们到 github 我们已经注册好的账号。。。 登陆github，选择Account Settings–&gt;SSH Keys 添加ssh title 为注册时的邮箱地址 如图所示： 5. key 值为我们第二步创建的 地方，， 如图： 6 打开finder 然后 command+shift+G 在弹出的文件夹中输入 上面的地址。 然后找到文件 如图： 注： 如果这里找不到 .ssh 文件的话 ，我们可以在终端输入 显示隐藏文件的命令（ 显示Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles YES ） （显示Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles YES 隐藏Mac隐藏文件的命令：defaults write com.apple.finder AppleShowAllFiles NO 输完单击Enter键，退出终端，重新启动Finder就可以了） 7 . 找到 id_rsa.pub文件，然后我们打开该文件，然后复制里面的内容，填入上面的Key 中 然后点击addKey 8. 接下来我们验证一下 先测试一下你的帐号跟github连上没有 打开终端，输入命令： ssh -T git@github.com 如图： 当我们 看到 这句话的话证明链接成功了。。。 9. 接下来，我们到 https://github.com/ 创建一个新的仓库： 如图： 点击创建： 然后我们就创建成功了。 然后我们就看到下面的界面： 上面的参数介绍： Description： 项目描述 public 和private 公开和隐私 最后一个是否添加一个README 的描述文件 点击Create 然后我们看到下面的界面： 如图： 1 0. 这里我们看到了git的命令了， 接下来我们回到终端:( 按照上面的命令来执行： )（注意：这里用到的git命令，你要切换到你要上传项目的目录下，然后使用下面的命令 ） git init //初始化本地仓库 git add README.md //添加项目的描述文件 git commit -m “bujieshi commit” // 提交到仓库 并写一下注释 “”部分为注释内容 git remote add origin https://github.com/bujieshi/BLEDome.git // 远程连接仓库，并且穿件一个名称为“origin” de 文件夹仓库 git push -u origin master // 将本地的东西上传到地址为origin的地址下,master 分支下。 11. OK 到这里，我们的项目已经上传到远程仓库了，来个截图瞄瞄： 接下来我们再来介绍一下本地如何建造仓库： $ makdir ~/hello-world //创建一个项目hello-world $ cd ~/hello-world //打开这个项目 $ git init //初始化 $ touch README $ git add README //更新README文件 $ git commit -m &#39;first commit&#39; //提交更新，并注释信息“first commit” $ git remote add origin git@github.com:defnngj/hello-world.git //连接远程github项目 $ git push -u origin master //将本地项目更新到github项目上去 最后:（我们不想让项目进行继续托管状态或者说我们取消项目与svn 的关联） (注： 这里执行下面的命令，我们要跳转到我们要取消关联的项目文件夹中，然后执行下面的操做) 1.删除 项目与git 的关联（也就是删除项目中的.git ）命令如下： find .-name “.git” | xargs rm -Rf 2.删除项目与svn 的关联(也就是删除项目中的.svn) 命令如下: find .-name “.svn” | xargs rm -Rf 总结 ：github 作为一个 代码托管平台，很受欢迎，所以，在这里简单的写了一下，下篇我们来讲 github 客户端的使用；]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50326673%2F</url>
    <content type="text"><![CDATA[Itunes 制作苹果手机铃声 1.找到我们要添加的歌曲，直接拖入到iTunes中去。如图： 2.我们选中我们添加的文件，单击右键列表:(选择显示简介选项), 如图： 3.到达这个页面，如图： 4.选择“选项”选项卡 如图： 5. 在开始的地方输入我们要截取的音乐,( 注:苹果的铃声的大小不能超过40秒,如果超过,不能加入到铃声库中 ) 我这里选择19秒的一个片段(注：来电铃声会不断的循环)。 如图： 6. 设置好了以后，我们点击确定，然后返回到我们的音乐的首页( 注：这里以后是重要操作，不要眨眼啊 )； 这里我们找到我们修改的文件 然后点击右键 选择“创建ACC版本” 7. 然后我们看到，现在的列表上有两个文件，如图： 8.看到两个文件，19秒的那个文件就是我们创建的文件，然后我们单击右键 9.然后我们找到我们刚刚创建的文件”.m4a”结尾的文件，然后我们进行如下操作： 如图： 更改后缀为“m4r” 10.这里点击使用“.m4r”, 确定后 如图: 11. 这里以后，我们基本已经完成了铃声的只做了。把我们得到的“.m4r” 拷贝一份出去，我把它拷贝到下载的文件夹中： 如图： 11. 接下来我们打开我们的iTunes ，然后点开我们的那个隐藏的列表，然后点击铃声 如图： 12. 我们看到我们的铃声库了 13.接下来我们找到菜单栏，然后选择文件–&gt;添加到资料库 如图： 这里找到我们复制出来的“.m4r”的文件 然后点击打开，然后，我们就看到我们的这个里面就添加进来我们制作的铃声了 13.接下来 点击 左边的栏目有个铃声 。同步所有铃声 14. 上面选择完成了，下面有个同步，点击一下，Ok了 我们就可以在我们的手机上看到我们制作的铃声了： 15.OK了，快去制作自己喜欢的铃声吧]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50433760%2F</url>
    <content type="text"><![CDATA[cocoapods 的详细使用 最近好多人在问我怎么安装cocoapods，怎么使用cocoapods，今天就写篇文章来告诉你们， 其实cocoapods的使用也是很简单的，就是介个命令而已。 1.首先我们要打开我们的终端：如图： 2 . 输入命令， gem sources -l 来查看镜像是否被墙，如图( 下面的镜像是我替换过以后的图像) 这里输出的如果是 https://rubygems.org/ 镜像的话，我们要删除这个镜像，然后添加镜像：https://ruby.taobao.org/ 具体操作命令如下： 删除原始镜像： gem sources –remove https://rubygems.org/ 添加新的镜像： gem sources -a https://ruby.taobao.org/ 查看是否更改成功：再次输入以下命令： 如图：(那么我们镜像更改成功了) 3 .接下来我们要进行安装 cocoapods 的重要步骤了；( sudo gem install -n /usr/local/bincocoapods ) 大概过了个10几分钟，然后就安装成功了。 如图：(安装成功) 4.接下来我们检测是否安装成功：直接输入 pod 命令或者输入 pod search AFNetworking 来检查是否安装成功。 如图所示： 如果出现如图所示，表示安装成功。（注：如果出现如下图情况的话： ） 出现 这种情况的话，不要慌张，耐心等待即可 ：如果出现下面的内容，表示设置成功 5 .接下来我们研究一下怎么使用cocoapods，首先我们创建一个Dome，创建成功后我们进入到我们项目的根目录(注：这里我创建的Dome 在桌面)如图所示： 6 .上面就是Dome 的根目录，然后在这里我们要创建Podfile，命令如下： touch Podfile 如图所示： 我们创建Podfile 成功; 7 . 接下来我们就要操作Podfile 文件了，说到这里有中方法来写我们的Podfile文件 第一种使用vim，第二种直接打开Podfile 来写入我们需要的东西 使用之前我们比如我们要加入 AFNetworking 这个第三方库，我们执行一下命令 ： pod search AFNetworking ( 注：对于我们不知道如何写 Podfile 文件，这里我教你怎么写，执行上面的命令后，下面我红色标示的内容就是我们要写入到Podflie中的内容 )如图所示： 使用vim 命令，来写 输入命令: vim Podfile 如图： 接下来 我们开始编辑： 如图所示： 里面 写入的参数：platform : ios,’7.0’ (注：找个参数表示为最低支持的系统版本) 第二个参数就是我们上一步执行搜索出来的内容，复制到这里就Ok了 （ 注：如图所示，我们加入了我们需要的东西，写入完成了，然后我们要保存退出，这里要怎么退出来vim呢？，写入完成后，我们点击左上角的esc按钮，然后输入冒号（：），然后输入wq，（wq 的意思是保存退出的意思），然后回车 ） 如图所示： 这里我们介绍第二种方法，直接在我们的项目中使用Podfile 文件来写入上面的内容( 注：这种方法简单粗暴，建议大家使用这种方法 ) 如图所示： 打开 我们的项目的文件夹 ，然后打开Podflie文件，在里面写入上面的两行：如图所示 写入 完成，保存退出，我们回到终端 8.回到终端，接下来我们的操作就是一样了，我们要在我们的Dome项目中导入 AFNetworking 这个第三方库 接下来的两个命令是我们经常使用的 pod install 和 pod update (注：这两个命令被墙了，貌似现在使用不了了) 现在我们使用下面的两个命令： pod install ： 现在使用 ： pod install –verbose –no-repo-update pod update : 现在使用 ： pod update –verbose –no-repo-update 接下来我们在终端输入命令 : pod install –verbose –no-repo-update 如图所示： 如果 看到下面的字样，表示我们导入第三方库成功：(如图所示：) 注意上面的绿色的字体的翻译 ,( 注： 这里告诉我们再次打开项目，要用Dome6.xcworkspae打开,如果使用Dome6.scodeproj打开的话就会报错 ) 9. 接下来们打开我们的项目，你会发现，多出来了一些东西，如图所示： 我们 用 打开项目，我们来看看现在的项目架构， 如图所示： 1 0.根据上面的目录可以看到，我们加入AFNetworking 的库已经成功添加进来了。到这里基本算是完成了。 11.接下来我们说 ，我现在不想添加这个AFNetworking 这个库了，我想把它从我们的项目中移除，怎么办： 我来告诉你，很简单：（注：看到上面我们项目中的Podfile 文件打开） 如图所示： 我们现在不需要AFNetworking这个第三方库了，我们把下面的 pod ‘AFNetworking’, ‘~&gt; 3.0.0-beta.1’这句话从Podfile中删除就好了 接下来我们回到终端，输入命令： pod update –verbose –no-repo-update （ 注 ：更新命令 ） 如图所示： 看到上面的内容，表示我们，已经把AFNetworking 从我们的项目中移除出去了 接下来我们看看，我们的项目中还有没有这个库， 看到文件夹中都是空的，OK，证明我们已经把它从我们的项目中移除出去了。 总结：OK，到这里总格流程基本上搞清楚了，cocoapods 大概就那么几个命令，只要会用就是这么简单。。。。 cocoapods 赶紧玩起来吧。 不懂的请留意，请骚扰我。。。。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F50524214%2F</url>
    <content type="text"><![CDATA[Miku 修改背景音乐 这两天有个xcode的插件 Miku 玩的挺火的。 下载地址： https://github.com/poboke/Miku 但是里面的背景音真是听吐了（）。 然后百度搜索 怎么修改背景音乐。然后无果。 然后自己摸索。修改方法如下： 第一：要安装好这个插件以后。 第二步： 进入插件目录，然后找到这个插件。 （方法： ~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/Miku.xcplugin ） 第三步：这个就是我们看到我们所有的插件了；找到这个插件：如图： 第四 步：然后进入下个界面： 如图： 第五 步：然后打开这个界面： 如图： 第六步 ： 然后打开 Resource 这个文件夹： 第七步： 然后打开这个文件夹；如图： 第八步 ： 进入文件夹 resource， 然后看到音乐：如图： 第九步 ：然后找个你要更改的MP3 格式的歌曲 。然后放入这个文件夹中 ，名字要和这个名字一样（ 注：不然js识别不出来 ）； 第十步： 然后重启xcode 就Ok了； 就是这么简单。就是这个粗暴。赶快去玩吧； 玩转你的程序鼓励师！]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F51161228%2F</url>
    <content type="text"><![CDATA[[ cocoaPods 安装第三库出现错误(target overrides the USER_HEADER_SEARCH_PATHS buildsetting defined in `Pods/) ](/qq_18670721/article/details/51161228) 1.今天在往项目中使用Cocoapods 添加第三方库的时候，出现问题 ： 1.添加上第三方库以后，然后直接运行项目，然后项目就报错，还是稀奇古怪的错误。 2.终端上也在提示我们第三方库没有添加成功，报错如下： 3 .解决办法如下： 1&gt;按照上面报错的提示，我们“ USER_HEADER_SEARCH_PATHS ” 这个复制下来。 2&gt;然后找到我们项目–》targates–》buildSetting 然后在右边的输入框中输入“ USER_HEADER_SEARCH_PATHS” 如下图： 3&gt; 然后搜索到了这个路径以后 ,在这路径中添加 “$(inherited)” 如下图： 4&gt;然后我们再次运行我们的项目 ，我们的项目就不会报错了。 4. 总结一下： cocoapods 我们只是用来管理第三方的，所以可能用的时候可能会出现很多未知的错误。要我们大家共同来发现了。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F51861268%2F</url>
    <content type="text"><![CDATA[开发者账号申请流程一 （邓白氏编码的申请） 根据公司需求又要申请一次开发者账号，基于对开发者账号的遗忘，所以来写一篇博客来巩固一下。接下来开始申请。 前提条件： 1.需要appID 账号。 2. https://developer.apple.com/ 开发者官网 1. 打开开发者官网，然后进入界面，打开 acount, 如图： 2 . 点击加入苹果开发者计划:(如图): 3 .点击右上角的注册按钮：页面跳转：(如图：) 4 .点击开始注册： （如图） 5 .上面的信息为你的Appid 的信息，下面的实体类型为你要申请的开发者账号的类型 6. 第一个是个人开发者账号，第二个为公司版的开发者账号，第三个为企业版的开发者账号(这里我要注册的是公司版的账号,所以选择第二个) ,会出现下面的情况 下面这里是问我们，是否你的公司已经注册过邓白氏编码，点击进去， 7. 跳转到页面 这个页面就是填入信息，第一个条目选择国家，第二个条目填写公司的名称，英文名称（如：Tencent technology co., LTD），接下来填写： 公司 的地址和邮寄地址，接下来，我们填写个人的信息 8 .填写完成后 点击continue , 9.下个页面会告诉你们公司是否申请过邓白氏编码，申请过的话，就会显示出来个邓白氏编码，没有的话就会让你提交表单。然后接下来就是漫长的等待了，然后你的邮箱就会收到一条邮件：(如下：) 1 0. 邮件中会告诉你什么时间可以申请好邓白氏编码。接下来就是漫长的等待了。 好了，这篇文章介绍就到这里了，邓白氏编码的申请就是这么简单。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F51162336%2F</url>
    <content type="text"><![CDATA[[ cocoapods 安装第三方库，然后运行项目，报错（sharedApplication’ is unavailable: notavailable iOS (App Extension)） ](/qq_18670721/article/details/51162336) 1.不知怎么回事，这两天遇到的都是cocoapods 的问题。 2.安装一个第三方库，然后 直接在运行项目，然后就出现错误：错误如下： 有时候 也不一定是这个错误。还可能报 UIActionSheet或者是 UIAlertView的错误 但是 错误提示和上面的一模一样。 3.我在想，以前安装都没有问题，为什么这两天安装就有问题了。后来经过半天的google和百度终于找到原因了不是我们代码的问题，也不是第三方库的问题，问题就出在了cocoapods上面。 4.解决办法如下： 首先我们要卸载我们的cocoapods 然后我们再重新安装我们的cocoapods，然后再重新导入我们的第三方库。 然后，再次运行我们的项目然后就不会再报这个错误了。(注：怎么卸载和怎么安装cocoapods 我的博客中都有体现的)。 5.这个解决办法是按照苹果官方论坛给出的解决办法：（链接如下：） https://forums.developer.apple.com/thread/25213 总结：总有那么多我们预想不到的错误，努力吧！加油！]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F51323473%2F</url>
    <content type="text"><![CDATA[使用hexo+github 搭建自己的博客领地 1.使用hexo 和github 创建属于自己的私人领地 1.安装hexo ，之前必须要有两个必要的条件 1.必须要安装Node.js 这个工具包 下载 2.必须安装git； 2.满足这两个条件后，我们就要开始安装hexo 了 安装之前我们要创建一个本地的文件夹，然后把hexo安装的配置文件存放在这个文件夹中。然后我们打开终端，然后找到我们刚刚创建的文件夹，在这个文件夹下我们输入hexo的安装命令 ;命令如下： sudo npm install-g hexo 3 . 如图，出现上面的内容以后证明我们已经安装hexo 成功了。 4.接下来，我们要输入命令 “ hexo init “ 初始化 如图所示 6 . 我们要生成静态页面； 命令如下： hexo generate (hexo g 也可以); 如图所示： 5 .初始化完成以后，我们要开启本地的服务 输入命令：” hexo server “ 如图： 6 .输入命令后我们可以打开这个网站 http:localhost:4000/ ;有的时候能打开，有的时候打不开，没有关系，我们接下来配置一下就好了。 7.接下来我们要配置GitHub ; 1&gt; 有github账号的话可以直接创建 和用户名一样的仓库， 列如： 我的github 的账号是bujieshi, 那么我们新创建的仓库名称为bujieshi.github.io; 一定要对应，不然的话 后期配置无法关联； 如图所示 2 &gt;接下来我们要创建 账户和我们本地的关联了，仓库创建成功我们要复制仓库的地址， 接下来我们到终端，找到我们安装hexo 的目录 查看一下；(如图所示：) 3&gt; 接下来我们要关联账户 输入命令:” vim _config.yml “, 然后进入vim 编辑模式 ， 进入后 输入i，进入编辑模式，更改如下： 如图所示：(把我们github 的账户的地址复制进来) 4 &gt; 更改完成后，点击ESC 按钮， 然后输入:wq 保存退出 8 接下来输入命令： ” npm install hexo-deployer-git–save “ 如图所示 9.然后输入命令：” hexo d “ //上传本地更改内容到github； 然后我们就可以打开自己的博客了 地址为：你自己的用户名 http://bujieshi.github.io/ 以后每次部署步骤 每次部署的步骤，可按以下三步来进行。 hexo clean hexo generate hexo deploy 至此，我们基本算是配置完了，接下来再来几个 常用的命令 hexo new”postName” #新建文章 hexo new page”pageName” #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F72922131%2F</url>
    <content type="text"><![CDATA[APP 上传遇到的问题 APP 上传遇到的问题![这里写图片描述](http://img.blog.csdn.net/20170608162110433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NzA3MjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) 解决办法解决办法，登陆到苹果开发者账号中心，然后点击税务，然后更新下合同协议 然后就OK了!]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F72922201%2F</url>
    <content type="text"><![CDATA[从Mac中完全删除office 验证数字：sudo sh -c &quot;curl -s https://raw.githubusercontent.com/jimye/OfficeUninstall/master/office_uninstaller.sh | sh&quot; 等待终端命令走完就OK了，我们就彻底从我们的项目删除office 的所有文件了 然后从新安装就好了。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F72922219%2F</url>
    <content type="text"><![CDATA[代码行数统计 代码行数统计命令行找到项目所在位置的根目录，然后输入下面的命令 find . &quot;(&quot; -name &quot;*.m&quot; -or -name &quot;*.mm&quot; -or -name &quot;*.cpp&quot; -or -name &quot;*.h&quot; -or -name “*.swift” -or -name &quot;*.rss&quot; &quot;)&quot; -print | xargs wc -l]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F72922237%2F</url>
    <content type="text"><![CDATA[清除项目中与svn的关联 清除项目中与svn 的关联终端进入到你项目中所在文件夹的根目录 然后在终端输入命令find . -type d -name &quot;.svn&quot; |xargs rm -rvf 然后就删除项目 与svn的关联了。。。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F72922278%2F</url>
    <content type="text"><![CDATA[Afnetworking访问遇到3840_错误 AFNetWorking 访问遇到3840 错误错误标示如下：Error Domain=NSCocoaErrorDomain Code=3840 &quot;No string key for value in object around character 1.&quot; UserInfo={NSDebugDescription=No string key for value in object around character 1.} 解决办法在网络请求的地方添加上下面的语句：AFJSONResponseSerializer * responseSerializer =[AFJSONResponseSerializer serializerWithReadingOptions NSJSONReadingAllowFragments); 加载上这一句就Ok了]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F72923061%2F</url>
    <content type="text"><![CDATA[ios几个方法的用法 这两天用到一个系统api，分享给大家项目中用到一个对一个数组中的所有元素以某个分隔符来转换成一个字符串。用法如下：NSString*stringsssss=[array componentsJoinedByString:@&quot;,&quot;] 上面的句子表示：上面的方法就是将一个数组按照”,”分隔符 拼接成一个字符串。这个例子的逆向用法为，将一个字符串以某个分隔符来把字符创装换成数组。用法如下： NSArray*stringSSSSS=[string componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@&quot;,&quot;]]; 上面的句子表示：上面的方法就是将一个字符串按照”,”分隔符，转换成一个数组。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F72922629%2F</url>
    <content type="text"><![CDATA[IOS 最全面的正则表达式 验证数字：^[0-9]*$ 验证n位的数字：^\d{n}$ 验证至少n位数字：^\d{n,}$ 验证m-n位的数字：^\d{m,n}$ 验证数字和小数点:^[0-9]+([.]{0}|[.]{1}[0-9]+)$ 验证零和非零开头的数字：^(0|[1-9][0-9]*)$ 验证有两位小数的正实数：^[0-9]+(.[0-9]{2})?$ 验证有1-3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$ 验证非零的正整数：^\+?[1-9][0-9]*$ 验证非零的负整数：^\-[1-9][0-9]*$ 验证非负整数（正整数 + 0）^\d+$ 验证非正整数（负整数 + 0）^((-\d+)|(0+))$ 验证长度为3的字符：^.{3}$ 验证由26个英文字母组成的字符串：^[A-Za-z]+$ 验证由26个大写英文字母组成的字符串：^[A-Z]+$ 验证由26个小写英文字母组成的字符串：^[a-z]+$ 验证由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$ 验证由数字、26个英文字母或者下划线组成的字符串：^\w+$ 验证用户密码:^[a-zA-Z]\w{5,17}$ 正确格式为：以字母开头，长度在6-18之间，只能包含字符、数字和下划线。 验证是否含有^%&amp;&#39;,;=?$\&quot; 等字符：[^%&amp;&#39;,;=?$\x22]+ 验证汉字：^[\u4e00-\u9fa5],{0,}$ 匹配中文字符的正则表达式：[\u4e00-\u9fa5] 评注：匹配中文还真是个头疼的事，有了这个表达式就好办了 匹配双字节字符(包括汉字在内)：[^\x00-\xff] 评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） 验证Email地址：^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$ 匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* 评注：表单验证时很实用 验证InternetURL：^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$ ；^[a-zA-z]+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$ 匹配网址URL的正则表达式：[a-zA-z]+://[^\s]* 评注：网上流传的版本功能很有限，上面这个基本可以满足需求 验证电话号码：^(\(\d{3,4}\)|\d{3,4}-)?\d{7,8}$： --正确格式为：XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX。 验证电话号码及手机:（\d{3}-\d{8}|\d{4}-\d{7}）｜（^((\(\d{3}\))|(\d{3}\-))?13\d{9}|15[89]\d{8}$） 验证身份证号（15位或18位数字）：^\d{15}|\d{}18$ 匹配身份证：\d{15}|\d{18} 评注：中国的身份证为15位或18位 验证一年的12个月：^(0?[1-9]|1[0-2])$ 正确格式为：“01”-“09”和“1”“12” 匹配月份的正则表达式^[1-9]$|^1[0-2]$ 注：个位数月份匹配方式 前面不能加 0。 ^0?[1-9]$|^1[0-2]$ 注：个位数月份前可以加0或者不加。 匹配年份19或者20^(19|20)[0-9]{2}$ 注：1990或者2000 验证一个月的31天：^((0?[1-9])|((1|2)[0-9])|30|31)$ 正确格式为：01、09和1、31。 整数：^-?\d+$ 非负浮点数（正浮点数 + 0）：^\d+(\.\d+)?$ 正浮点数^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$ 非正浮点数（负浮点数 + 0）^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 负浮点数^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$ 浮点数^(-?\d+)(\.\d+)?$ 匹配空白行的正则表达式：\n\s*\r 评注：可以用来删除空白行 匹配HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt; 评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧没有能力为力 匹配首尾空白字符的正则表达式：^\s*|\s*$ 评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式 匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 评注：表单验证时很实用 匹配国内电话号码:(国内固定电话)\d{3}-\d{8}|\d{4}-\d{7} 评注：匹配形式如 0511-4405222 或 021-87888822 匹配腾讯QQ号：[1-9][0-9]{4,} 评注：腾讯QQ号从10000开始 匹配中国邮政编码：[1-9]\d{5}(?!\d) 评注：中国邮政编码为6位数字 匹配ip地址：\d+\.\d+\.\d+\.\d+ 评注：提取ip地址时有用 匹配特定数字：^[1-9]\d*$ //匹配正整数 ^-[1-9]\d*$ //匹配负整数 ^-?[1-9]\d*$ //匹配整数 ^[1-9]\d*|0$ //匹配非负整数（正整数 + 0） ^-[1-9]\d*|0$ //匹配非正整数（负整数 + 0） ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ //匹配正浮点数 ^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ //匹配负浮点数 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$ //匹配浮点数 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$ //匹配非负浮点数（正浮点数 + 0） ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$ //匹配非正浮点数（负浮点数 + 0） 评注：处理大量数据时有用，具体应用时注意修正 匹配特定字符串：^[A-Za-z]+$ //匹配由26个英文字母组成的字符串 ^[A-Z]+$ //匹配由26个英文字母的大写组成的字符串 ^[a-z]+$ //匹配由26个英文字母的小写组成的字符串 ^[A-Za-z0-9]+$ //匹配由数字和26个英文字母组成的字符串 ^\w+$ //匹配由数字、26个英文字母或者下划线组成的字符串 匹配中文:[\u4e00-\u9fa5] 英文字母:[a-zA-Z] 数字:[0-9] 匹配中文，英文字母和数字及_:^[\u4e00-\u9fa5_a-zA-Z0-9]+$ 同时判断输入长度： [\u4e00-\u9fa5_a-zA-Z0-9_]{4,10} 一个正则表达式，只含有汉字、数字、字母、下划线不能以下划线开头和结尾：^[\w\u4E00-\u9FA5\uF900-\uFA2D]*$ ^(?!_)(?!.*?_$)[a-zA-Z0-9_\u4e00-\u9fa5]+$ 其中：^ 与字符串开始的地方匹配 (?!_) 不能以_开头 (?!.*?_$) 不能以_结尾 [a-zA-Z0-9_\u4e00-\u9fa5]+ 至少一个汉字、数字、字母、下划线 $ 与字符串结束的地方匹配 放在程序里前面加@，否则需要\\进行转义 @&quot;^(?!_)(?!.*?_$)[a-zA-Z0-9_\u4e00-\u9fa5]+$&quot; （或者：@&quot;^(?!_)\w*(?&lt;!_)$&quot; 或者 @&quot; ^[\u4E00-\u9FA50-9a-zA-Z_]+$ &quot; ) 只含有汉字、数字、字母、下划线，下划线位置不限：^[a-zA-Z0-9_\u4e00-\u9fa5]+$ 由数字、26个英文字母或者下划线组成的字符串^\w+$ 2~4个汉字@&quot;^[\u4E00-\u9FA5]{2,4}$&quot;; 用：(Abc)+ 来分析： XYZAbcAbcAbcXYZAbcAb^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$ 用：(Abc)+ 来分析： XYZAbcAbcAbcXYZAbcAb XYZAbcAbcAbcXYZAbcAb6、 [^\u4E00-\u9FA50-9a-zA-Z_] 34555#5&#39; --&gt;34555#5&#39; [\u4E00-\u9FA50-9a-zA-Z_] eiieng_89_ ---&gt; eiieng_89_ _&#39;;&#39;eiieng_88&amp;*9_ --&gt; _&#39;;&#39;eiieng_88&amp;*9_ _&#39;;&#39;eiieng_88_&amp;*9_ --&gt; _&#39;;&#39;eiieng_88_&amp;*9_ 最长不得超过7个汉字，或14个字节(数字，字母和下划线)正则表达式^[\u4e00-\u9fa5]{1,7}$|^[\dA-Za-z_]{1,14}$ 最后来说说正则表达式的用法吧NSString* emailRegex = @&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}&quot;; NSPredicate* emailTest = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, emailRegex]; return [emailTest evaluateWithObject:candidate]; 好吧就到这里了，有兴趣的可以研究一下。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F72923221%2F</url>
    <content type="text"><![CDATA[Xcode 插件管理器安装和删除 Xcode 插件管理器安装 ：安装：命令mkdir -p ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins;curl -L http://git.io/lOQWeA | tar xvz -C ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins 删除命令：rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcpluginrm -rf ~/Library/Application\ Support/Alcatraz]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F72954378%2F</url>
    <content type="text"><![CDATA[U盘重装Mac系统 制作U盘 安装系统 （参数说明：第一个位置为 系统所在位置，第二个位置为 目标位置 下面紫色的位置为 U盘的名称）sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/Capitan --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app --nointeraction 最后一个capitan 为最后U盘位置]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F72954473%2F</url>
    <content type="text"><![CDATA[图片旋转问题(指针旋转问题) 1.最近项目速度表盘有个指针旋转的动画问题(卡了很久了)2.因为项目都是使用的自动布局,所以这个表盘和指针也是用的自动布局3.然后动画的时候一直跑偏，指针一直跑偏4.后来找到原因，因为自动布局的话会对动画有一定的影响5.然后更改自动布局的方式改成Frame (包括指针和表盘)6.更改后，发现问题 _pointImageView.layer.anchorPoint = CGPointMake(1, 0); 指针图片旋转如果添加上这句话的话，然后指针的图片就会跑偏，然后就百度一堆问题，找到原因，7.根据博客 http://blog.csdn.net/yongyinmg/article/details/37927793 上面的介绍， 实际开发中，改变 anchorPoint 的值然后会导致layer层位置的变化，所有按照博客上的说法：但是在实际使用没必要这么麻烦。修改anchorPoint而不想移动layer，在修改 anchorPoint后再重新设置一遍frame就可以达到目的，这时 position 就会自动进行相应的改变。 8.所以我在设置完 _pointImageView.layer.anchorPoint = CGPointMake(1, 0) ，然后就对 _pointImageView的frame从新就行赋值，然后旋转为题就解决了 ，9.哎，这个问题快纠结很长时间，所以啊，还是要多了解的。必经第一次写动画。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F10%2F73177662%2F</url>
    <content type="text"><![CDATA[npm安装hexo 报错 错误如下 解决办法如下:问题解决:(使用下面的命令，问题就解决)sudo npm install –unsafe-perm –verbose -g hexo]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F06%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new "My New Post" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>